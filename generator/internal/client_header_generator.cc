// Copyright 2019 Google Inc.  All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <memory>
#include <sstream>
#include <string>

#include "gapic_utils.h"
#include "printer.h"
#include "src/google/protobuf/descriptor.h"
#include "generator/internal/client_header_generator.h"
#include "generator/internal/data_model.h"

namespace pb = google::protobuf;

namespace google {
namespace api {
namespace codegen {
namespace internal {

std::vector<std::string> BuildClientHeaderIncludes(
    pb::ServiceDescriptor const* service) {
  return {
      SystemInclude("memory"),
      LocalInclude(absl::StrCat(
          internal::ServiceNameToFilePath(service->name()), "_stub.gapic.h")),
      LocalInclude(absl::StrCat(service->name(), ".pb.h")),
      LocalInclude("gax/status_or.h"),
      LocalInclude("gax/retry_policy.h"),
      LocalInclude("gax/backoff_policy.h"),
  };
}

std::vector<std::string> BuildClientStubHeaderIncludes(
    pb::ServiceDescriptor const* service) {
  return {
      LocalInclude(absl::StrCat(service->name(), ".pb.h")),
      LocalInclude("grpcpp/client_context.h"),
      LocalInclude("grpc/status.h"),
  };
}

std::vector<std::string> BuildClientHeaderNamespaces(
    pb::ServiceDescriptor const* /* service */) {
  return std::vector<std::string>();
}

bool GenerateClientHeader(pb::ServiceDescriptor const* service,
                          std::map<std::string, std::string> const& vars,
                          Printer& p, std::string* /* error */) {
  auto includes = BuildClientHeaderIncludes(service);
  auto namespaces = BuildClientHeaderNamespaces(service);

  p->Print(vars,
           "// Generated by the GAPIC C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n"
           "#ifndef $header_include_guard_const$\n"
           "#define $header_include_guard_const$\n");

  for (auto include : includes) {
    p->Print("\n#include $include$", "include", include);
  }

  for (auto nspace : namespaces) {
    p->Print("\nnamespace $namespace$ {", "namespace", nspace);
  }

  p->Print(vars,
           "\n"
           "$class_comment_block$\n"
           "class $class_name$ final {\n"
           "public:\n");

  p->Print(vars,
           R"ctors(
$class_name$(std::shared_ptr<$stub_class_name$> stub) : stub_(std::move(stub)) {}

template<typename... Policies>
$class_name$(std::shared_ptr<$stub_class_name$> stub, Policies&&... policies) :
$class_name$(std::move(stub)) {
ChangePolicies(std::forward<policies>...);
}

$class_name$($class_name$ const&) = delete;
$class_name$& operator=($class_name$ const&) = delete;

std::shared_ptr<$stub_class_name$> Stub() { return stub_; }

)ctors");

  DataModel::PrintMethods(service, vars, p,
                          "gax::StatusOr<$response_object$> "
                          "$method_name$($request_object$ const& request);\n",
                          NoStreamingPredicate);

  p->Print(vars, R"private(
private:
void ChangePolicy(gax::RetryPolicy const& policy) {
retry_policy_ = policy.clone();
}

void ChangePolicy(gax::BackoffPolicy const& policy) {
backoff_policy_ = policy.clone();
}

void ChangePolicies() {}

template <typename Policy, typename... Policies>
void ChangePolicies(Policy&& policy, Policies&&... policies) {
ChangePolicy(policy);
ChangePolicies(std::forward<Policies>(policies)...);
}

std::shared_ptr<$stub_class_name$> stub_;
std::unique_ptr<gax::RetryPolicy> retry_policy_;
std::unique_ptr<gax::BackoffPolicy> backoff_policy;

)private");

  p->Print(vars, "\n}; // $class_name$");

  for (auto nspace : namespaces) {
    p->Print("\n} // namespace $namespace$", "namespace", nspace);
  }

  p->Print(vars,
           "\n"
           "#endif // $header_include_guard_const$\n");

  return true;
}

bool GenerateClientStubHeader(pb::ServiceDescriptor const* service,
                              std::map<std::string, std::string> const& vars,
                              Printer& p, std::string* /* error */) {
  auto includes = BuildClientStubHeaderIncludes(service);
  auto namespaces = BuildClientHeaderNamespaces(service);

  p->Print(vars,
           "// Generated by the GAPIC C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n"
           "#ifndef $stub_header_include_guard_const$\n"
           "#define $stub_header_include_guard_const$\n");

  for (auto const& include : includes) {
    p->Print("\n#include $include$", "include", include);
  }

  for (auto const& nspace : namespaces) {
    p->Print("\nnamespace $namespace$ {", "namespace", nspace);
  }

  p->Print("\n");

  // Abstract interface Stub base class
  p->Print(vars,
           "class $stub_class_name$ {\n"
           "public:\n");

  DataModel::PrintMethods(service, vars, p,
                          "virtual grpc::Status $method_name$("
                          "grpc::ClientContext* context,\n"
                          "$request_object$ const& request,\n"
                          "$response_object$* response);\n\n",
                          NoStreamingPredicate);

  p->Print(vars, "virtual ~$stub_class_name$() = 0;\n");

  p->Print(vars, "\n}; // $stub_class_name$");

  p->Print(vars,
           "\n\n"
           "#endif // $stub_header_include_guard_const$\n");

  return true;
}

}  // namespace internal
}  // namespace codegen
}  // namespace api
}  // namespace google
