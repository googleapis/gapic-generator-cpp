// Generated by the GAPIC C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/testdata/library.proto
#include "google/example/library/v1/library_service.gapic.h"
#include "google/example/library/v1/library_service_stub.gapic.h"
#include "gax/call_context.h"
#include "gax/status.h"
#include "gax/status_or.h"

google::gax::StatusOr<::google::example::library::v1::Book>
LibraryService::CreateBook(
::google::example::library::v1::CreateBookRequest const& request) {
  google::gax::CallContext context(create_book_info);
  if (retry_policy_) {
    context.SetRetryPolicy(*retry_policy_);
  }
  if (backoff_policy_) {
    context.SetBackoffPolicy(*backoff_policy_);
  }
  ::google::example::library::v1::Book response;
  google::gax::Status status = stub_->CreateBook(context, request, &response);
  if (status.IsOk()) {
    return response;
  } else {
    return status;
  }
}

google::gax::StatusOr<::google::example::library::v1::Book>
LibraryService::GetBook(
::google::example::library::v1::GetBookRequest const& request) {
  google::gax::CallContext context(get_book_info);
  if (retry_policy_) {
    context.SetRetryPolicy(*retry_policy_);
  }
  if (backoff_policy_) {
    context.SetBackoffPolicy(*backoff_policy_);
  }
  ::google::example::library::v1::Book response;
  google::gax::Status status = stub_->GetBook(context, request, &response);
  if (status.IsOk()) {
    return response;
  } else {
    return status;
  }
}

google::gax::StatusOr<::google::example::library::v1::ListBooksResponse>
LibraryService::ListBooks(
::google::example::library::v1::ListBooksRequest const& request) {
  google::gax::CallContext context(list_books_info);
  if (retry_policy_) {
    context.SetRetryPolicy(*retry_policy_);
  }
  if (backoff_policy_) {
    context.SetBackoffPolicy(*backoff_policy_);
  }
  ::google::example::library::v1::ListBooksResponse response;
  google::gax::Status status = stub_->ListBooks(context, request, &response);
  if (status.IsOk()) {
    return response;
  } else {
    return status;
  }
}

google::gax::StatusOr<::google::example::library::v1::Empty>
LibraryService::DeleteBook(
::google::example::library::v1::DeleteBookRequest const& request) {
  google::gax::CallContext context(delete_book_info);
  if (retry_policy_) {
    context.SetRetryPolicy(*retry_policy_);
  }
  if (backoff_policy_) {
    context.SetBackoffPolicy(*backoff_policy_);
  }
  ::google::example::library::v1::Empty response;
  google::gax::Status status = stub_->DeleteBook(context, request, &response);
  if (status.IsOk()) {
    return response;
  } else {
    return status;
  }
}

google::gax::StatusOr<::google::example::library::v1::Book>
LibraryService::UpdateBook(
::google::example::library::v1::UpdateBookRequest const& request) {
  google::gax::CallContext context(update_book_info);
  if (retry_policy_) {
    context.SetRetryPolicy(*retry_policy_);
  }
  if (backoff_policy_) {
    context.SetBackoffPolicy(*backoff_policy_);
  }
  ::google::example::library::v1::Book response;
  google::gax::Status status = stub_->UpdateBook(context, request, &response);
  if (status.IsOk()) {
    return response;
  } else {
    return status;
  }
}

google::gax::StatusOr<::google::example::library::v1::Book>
LibraryService::GetBigBook(
::google::example::library::v1::GetBookRequest const& request) {
  google::gax::CallContext context(get_big_book_info);
  if (retry_policy_) {
    context.SetRetryPolicy(*retry_policy_);
  }
  if (backoff_policy_) {
    context.SetBackoffPolicy(*backoff_policy_);
  }
  ::google::example::library::v1::Book response;
  google::gax::Status status = stub_->GetBigBook(context, request, &response);
  if (status.IsOk()) {
    return response;
  } else {
    return status;
  }
}

constexpr google::gax::MethodInfo LibraryService::create_book_info;
constexpr google::gax::MethodInfo LibraryService::get_book_info;
constexpr google::gax::MethodInfo LibraryService::list_books_info;
constexpr google::gax::MethodInfo LibraryService::delete_book_info;
constexpr google::gax::MethodInfo LibraryService::update_book_info;
constexpr google::gax::MethodInfo LibraryService::get_big_book_info;
