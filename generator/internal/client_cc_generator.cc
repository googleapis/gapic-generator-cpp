// Copyright 2019 Google Inc.  All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <memory>
#include <sstream>
#include <string>

#include "gapic_utils.h"
#include "printer.h"
#include "src/google/protobuf/descriptor.h"
#include "generator/internal/client_cc_generator.h"
#include "generator/internal/data_model.h"

namespace pb = google::protobuf;

namespace google {
namespace api {
namespace codegen {
namespace internal {

std::vector<std::string> BuildClientCCIncludes(
    pb::ServiceDescriptor const* service) {
  return {
      LocalInclude(absl::StrCat(
          internal::ServiceNameToFilePath(service->name()), ".gapic.h")),
      LocalInclude(absl::StrCat(
          internal::ServiceNameToFilePath(service->name()), "_stub.gapic.h")),
      LocalInclude("gax/status.h"),
      LocalInclude("gax/status_or.h"),
  };
}

std::vector<std::string> BuildClientCCNamespaces(
    pb::ServiceDescriptor const* /* service */) {
  return std::vector<std::string>();
}

bool GenerateClientCC(pb::ServiceDescriptor const* service,
                      std::map<std::string, std::string> const& vars,
                      Printer& p, std::string* /* error */) {
  auto includes = BuildClientCCIncludes(service);
  auto namespaces = BuildClientCCNamespaces(service);

  p->Print(vars,
           "// Generated by the GAPIC C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$");

  for (auto include : includes) {
    p->Print("\n#include $include$", "include", include);
  }
  for (auto nspace : namespaces) {
    p->Print("\nnamespace $namespace$ {", "namespace", nspace);
  }

  DataModel::PrintMethods(service, vars, p, R"method(
gax::StatusOr<$response_object$> $class_name$::$method_name$(
$request_object$ const& request) {
// TODO: actual useful work, e.g. retry, backoff, metadata, pagination, etc.
grpc::ClientContext;
$response_object$ response;
grpc::Status status = stub_->$method_name$(&context, request, &response);
if (status.ok()) {
return response;
} else {
return gax::GrpcStatusToGaxStatus(status);
}
}
)method",
                          NoStreamingPredicate);

  for (auto nspace : namespaces) {
    p->Print("\n} // namespace $namespace$", "namespace", nspace);
  }

  p->Print("\n");

  return true;
}

bool GenerateClientStubCC(pb::ServiceDescriptor const* service,
                          std::map<std::string, std::string> const& vars,
                          Printer& p, std::string* /* error */) {
  std::vector<std::string> includes{};
  includes.emplace_back(LocalInclude(
      absl::StrCat(CamelCaseToSnakeCase(service->name()), "_stub.gapic.h")));
  auto namespaces = BuildClientCCNamespaces(service);

  p->Print(vars,
           "// Generated by the GAPIC C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n");

  for (auto const& include : includes) {
    p->Print("\n#include $include$", "include", include);
  }
  for (auto const& nspace : namespaces) {
    p->Print("\nnamespace $namespace$ {", "namespace", nspace);
  }

  p->Print("\n");

  DataModel::PrintMethods(service, vars, p,
                          R"unimplemented(
grpc::Status $stub_class_name$::$method_name$(
grpc::ClientContext*,
$request_object$ const&,
$response_object$*) {
return grpc::Status(grpc::StatusCode::kUnimplemented,
"$method_name$ not implemented");
}
)unimplemented",
                          NoStreamingPredicate);

  p->Print(vars, "\n$stub_class_name$::~$stub_class_name$() {}\n");

  for (auto const& nspace : namespaces) {
    p->Print("\n} // namespace $namespace$", "namespace", nspace);
  }

  return true;
}

}  // namespace internal
}  // namespace codegen
}  // namespace api
}  // namespace google
