// Copyright 2019 Google Inc.  All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <memory>
#include <sstream>
#include <string>

#include "printer.h"
#include "src/google/protobuf/descriptor.h"
#include "generator/internal/client_header_generator.h"
#include "generator/internal/data_model.h"

namespace pb = google::protobuf;

namespace google {
namespace api {
namespace codegen {
namespace internal {

std::vector<std::string> BuildClientHeaderIncludes(
    pb::ServiceDescriptor const* /* service */) {
  return std::vector<std::string>();
}

std::vector<std::string> BuildClientHeaderNamespaces(
    pb::ServiceDescriptor const* /* service */) {
  return std::vector<std::string>();
}

bool GenerateClientHeader(pb::ServiceDescriptor const* service,
                          std::map<std::string, std::string> const& vars,
                          Printer& p, std::string* /* error */) {
  auto includes = BuildClientHeaderIncludes(service);
  auto namespaces = BuildClientHeaderNamespaces(service);

  p->Print(vars,
           "// Generated by the GAPIC C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n"
           "#ifndef $header_include_guard_const$\n"
           "#define $header_include_guard_const$");

  for (auto include : includes) {
    p->Print("\n#include $include$", "include", include);
  }
  for (auto nspace : namespaces) {
    p->Print("\nnamespace $namespace$ {", "namespace", nspace);
  }

  p->Print(vars,
           "\n"
           "$class_comment_block$\n"
           "class $class_name$ {");

  DataModel::PrintMethods(service, vars, p, "");

  p->Print(vars, "\n}; // $class_name$");

  for (auto nspace : namespaces) {
    p->Print("\n} // namespace $namespace$", "namespace", nspace);
  }

  p->Print(vars,
           "\n"
           "#endif // $header_include_guard_const$\n");

  return true;
}

}  // namespace internal
}  // namespace codegen
}  // namespace api
}  // namespace google
