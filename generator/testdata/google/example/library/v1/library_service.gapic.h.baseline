// Generated by the GAPIC C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/testdata/library.proto
#ifndef LibraryService_H_
#define LibraryService_H_

#include <memory>
#include "library_service_stub.gapic.h"
#include "LibraryService.pb.h"
#include "gax/status_or.h"
#include "gax/retry_policy.h"
#include "gax/backoff_policy.h"

// TODO: pull in comments
class LibraryService final {
 public:
  LibraryService(std::shared_ptr<LibraryServiceStub> stub) : 
    stub_(std::move(stub)) {}

  template<typename... Policies>
  LibraryService(std::shared_ptr<LibraryServiceStub> stub, 
    Policies&&... policies) : LibraryService(std::move(stub)) {
    ChangePolicies(std::forward<policies>...);
  }

  LibraryService(LibraryService const&) = delete;
  LibraryService& operator=(LibraryService const&) = delete;

  std::shared_ptr<LibraryServiceStub> Stub() { return stub_; }

  google::gax::StatusOr<::google::example::library::v1::Book> 
  CreateBook(::google::example::library::v1::CreateBookRequest const& request);

  google::gax::StatusOr<::google::example::library::v1::Book> 
  GetBook(::google::example::library::v1::GetBookRequest const& request);

  google::gax::StatusOr<::google::example::library::v1::ListBooksResponse> 
  ListBooks(::google::example::library::v1::ListBooksRequest const& request);

  google::gax::StatusOr<::google::example::library::v1::Empty> 
  DeleteBook(::google::example::library::v1::DeleteBookRequest const& request);

  google::gax::StatusOr<::google::example::library::v1::Book> 
  UpdateBook(::google::example::library::v1::UpdateBookRequest const& request);

  google::gax::StatusOr<::google::example::library::v1::Book> 
  GetBigBook(::google::example::library::v1::GetBookRequest const& request);


 private:
  void ChangePolicy(google::gax::RetryPolicy const& policy) {
    retry_policy_ = policy.clone();
  }
  void ChangePolicy(google::gax::BackoffPolicy const& policy) {
    backoff_policy_ = policy.clone();
  }
  void ChangePolicies() {}

  template <typename Policy, typename... Policies>
  void ChangePolicies(Policy&& policy, Policies&&... policies) {
    ChangePolicy(policy);
    ChangePolicies(std::forward<Policies>(policies)...);
  }

  std::shared_ptr<LibraryServiceStub> stub_;
  std::unique_ptr<google::gax::RetryPolicy> retry_policy_;
  std::unique_ptr<google::gax::BackoffPolicy> backoff_policy_;


  // Note: conservatively assume no methods are idempotent.
  //       This will eventually be set from annotations.
  static constexpr google::gax::MethodInfo create_book_info = {"CreateBook", google::gax::MethodInfo::RpcType::NORMAL_RPC};
  static constexpr google::gax::MethodInfo get_book_info = {"GetBook", google::gax::MethodInfo::RpcType::NORMAL_RPC};
  static constexpr google::gax::MethodInfo list_books_info = {"ListBooks", google::gax::MethodInfo::RpcType::NORMAL_RPC};
  static constexpr google::gax::MethodInfo delete_book_info = {"DeleteBook", google::gax::MethodInfo::RpcType::NORMAL_RPC};
  static constexpr google::gax::MethodInfo update_book_info = {"UpdateBook", google::gax::MethodInfo::RpcType::NORMAL_RPC};
  static constexpr google::gax::MethodInfo get_big_book_info = {"GetBigBook", google::gax::MethodInfo::RpcType::NORMAL_RPC};
}; // LibraryService

#endif // LibraryService_H_
