// Generated by the GAPIC C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/testdata/library.proto

#include "library_service_stub.gapic.h"
#include "gax/call_context.h"
#include "gax/status.h"
#include "grpcpp/client_context.h"
#include "grpcpp/channel.h"
#include "grpcpp/create_channel.h"

google::gax::Status
LibraryServiceStub::CreateBook(
  google::gax::CallContext&,
  ::google::example::library::v1::CreateBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "CreateBook not implemented");
}

google::gax::Status
LibraryServiceStub::GetBook(
  google::gax::CallContext&,
  ::google::example::library::v1::GetBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "GetBook not implemented");
}

google::gax::Status
LibraryServiceStub::ListBooks(
  google::gax::CallContext&,
  ::google::example::library::v1::ListBooksRequest const&,
  ::google::example::library::v1::ListBooksResponse*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "ListBooks not implemented");
}

google::gax::Status
LibraryServiceStub::DeleteBook(
  google::gax::CallContext&,
  ::google::example::library::v1::DeleteBookRequest const&,
  ::google::example::library::v1::Empty*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "DeleteBook not implemented");
}

google::gax::Status
LibraryServiceStub::UpdateBook(
  google::gax::CallContext&,
  ::google::example::library::v1::UpdateBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "UpdateBook not implemented");
}

google::gax::Status
LibraryServiceStub::GetBigBook(
  google::gax::CallContext&,
  ::google::example::library::v1::GetBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "GetBigBook not implemented");
}

LibraryServiceStub::~LibraryServiceStub() {}

namespace {
class DefaultLibraryServiceStub : public LibraryServiceStub {
 public:
  DefaultLibraryServiceStub(std::unique_ptr<LibraryService::StubInterface> grpc_stub)
    : grpc_stub_(std::move(grpc_stub)) {}

  DefaultLibraryServiceStub(DefaultLibraryServiceStub const&) = delete;
  DefaultLibraryServiceStub& operator=(DefaultLibraryServiceStub const&) = delete;

  google::gax::Status
  CreateBook(google::gax::CallContext& context,
    ::google::example::library::v1::CreateBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context->PrepareGrpcContext(&grpc_context);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->CreateBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  GetBook(google::gax::CallContext& context,
    ::google::example::library::v1::GetBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context->PrepareGrpcContext(&grpc_context);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->GetBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  ListBooks(google::gax::CallContext& context,
    ::google::example::library::v1::ListBooksRequest const& request,
    ::google::example::library::v1::ListBooksResponse* response) override {
    grpc::ClientContext grpc_ctx;
    context->PrepareGrpcContext(&grpc_context);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->ListBooks(&grpc_ctx, request, response));
  }

  google::gax::Status
  DeleteBook(google::gax::CallContext& context,
    ::google::example::library::v1::DeleteBookRequest const& request,
    ::google::example::library::v1::Empty* response) override {
    grpc::ClientContext grpc_ctx;
    context->PrepareGrpcContext(&grpc_context);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->DeleteBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  UpdateBook(google::gax::CallContext& context,
    ::google::example::library::v1::UpdateBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context->PrepareGrpcContext(&grpc_context);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->UpdateBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  GetBigBook(google::gax::CallContext& context,
    ::google::example::library::v1::GetBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context->PrepareGrpcContext(&grpc_context);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->GetBigBook(&grpc_ctx, request, response));
  }

 private:
  std::unique_ptr<::google::example::library::v1::LibraryService::StubInterface> grpc_stub_;
}; // DefaultLibraryServiceStub

} // namespace

std::unique_ptr<LibraryServiceStub> CreateLibraryServiceStub() {
  auto credentials = grpc::GoogleDefaultCredentials();
  return CreateLibraryServiceStub(std::move(credentials));
}

std::unique_ptr<LibraryServiceStub>
CreateLibraryServiceStub(std::shared_ptr<grpc::ChannelCredentials> creds) {
  auto channel = grpc::CreateChannel("library.googleapis.com",
    std::move(creds));
  auto grpc_stub = ::google::example::library::v1::LibraryService::NewStub(std::move(channel));
  return std::unique_ptr<LibraryServiceStub>(new 
    DefaultLibraryServiceStub(std::move(grpc_stub)));
}

