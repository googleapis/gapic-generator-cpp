// Generated by the GAPIC C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/testdata/library.proto

#include "google/example/library/v1/library_service_stub.gapic.h"
#include "generator/testdata/library.grpc.pb.h"
#include "gax/call_context.h"
#include "gax/retry_loop.h"
#include "gax/status.h"
#include "grpcpp/client_context.h"
#include "grpcpp/channel.h"
#include "grpcpp/create_channel.h"
#include <chrono>
#include <thread>

google::gax::Status
LibraryServiceStub::CreateBook(
  google::gax::CallContext&,
  ::google::example::library::v1::CreateBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "CreateBook not implemented");
}

google::gax::Status
LibraryServiceStub::GetBook(
  google::gax::CallContext&,
  ::google::example::library::v1::GetBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "GetBook not implemented");
}

google::gax::Status
LibraryServiceStub::ListBooks(
  google::gax::CallContext&,
  ::google::example::library::v1::ListBooksRequest const&,
  ::google::example::library::v1::ListBooksResponse*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "ListBooks not implemented");
}

google::gax::Status
LibraryServiceStub::DeleteBook(
  google::gax::CallContext&,
  ::google::example::library::v1::DeleteBookRequest const&,
  ::google::example::library::v1::Empty*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "DeleteBook not implemented");
}

google::gax::Status
LibraryServiceStub::UpdateBook(
  google::gax::CallContext&,
  ::google::example::library::v1::UpdateBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "UpdateBook not implemented");
}

google::gax::Status
LibraryServiceStub::GetBigBook(
  google::gax::CallContext&,
  ::google::example::library::v1::GetBookRequest const&,
  ::google::example::library::v1::Book*) {
  return google::gax::Status(google::gax::StatusCode::kUnimplemented,
    "GetBigBook not implemented");
}

LibraryServiceStub::~LibraryServiceStub() {}

namespace {
class DefaultLibraryServiceStub : public LibraryServiceStub {
 public:
  DefaultLibraryServiceStub(std::unique_ptr<::google::example::library::v1::LibraryService::StubInterface> grpc_stub)
    : grpc_stub_(std::move(grpc_stub)) {}

  DefaultLibraryServiceStub(DefaultLibraryServiceStub const&) = delete;
  DefaultLibraryServiceStub& operator=(DefaultLibraryServiceStub const&) = delete;

  google::gax::Status
  CreateBook(google::gax::CallContext& context,
    ::google::example::library::v1::CreateBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context.PrepareGrpcContext(&grpc_ctx);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->CreateBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  GetBook(google::gax::CallContext& context,
    ::google::example::library::v1::GetBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context.PrepareGrpcContext(&grpc_ctx);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->GetBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  ListBooks(google::gax::CallContext& context,
    ::google::example::library::v1::ListBooksRequest const& request,
    ::google::example::library::v1::ListBooksResponse* response) override {
    grpc::ClientContext grpc_ctx;
    context.PrepareGrpcContext(&grpc_ctx);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->ListBooks(&grpc_ctx, request, response));
  }

  google::gax::Status
  DeleteBook(google::gax::CallContext& context,
    ::google::example::library::v1::DeleteBookRequest const& request,
    ::google::example::library::v1::Empty* response) override {
    grpc::ClientContext grpc_ctx;
    context.PrepareGrpcContext(&grpc_ctx);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->DeleteBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  UpdateBook(google::gax::CallContext& context,
    ::google::example::library::v1::UpdateBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context.PrepareGrpcContext(&grpc_ctx);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->UpdateBook(&grpc_ctx, request, response));
  }

  google::gax::Status
  GetBigBook(google::gax::CallContext& context,
    ::google::example::library::v1::GetBookRequest const& request,
    ::google::example::library::v1::Book* response) override {
    grpc::ClientContext grpc_ctx;
    context.PrepareGrpcContext(&grpc_ctx);
    return google::gax::GrpcStatusToGaxStatus(grpc_stub_->GetBigBook(&grpc_ctx, request, response));
  }

 private:
  std::unique_ptr<::google::example::library::v1::LibraryService::StubInterface> grpc_stub_;
};  // DefaultLibraryServiceStub

class RetryLibraryServiceStub : public LibraryServiceStub {
 public:
  RetryLibraryServiceStub(std::unique_ptr<LibraryServiceStub> stub,
                          google::gax::RetryPolicy const& retry_policy,
                          google::gax::BackoffPolicy const& backoff_policy) :
            next_stub_(std::move(stub)),
            default_retry_policy_(retry_policy.clone()),
            default_backoff_policy_(backoff_policy.clone()) {}

  google::gax::Status
  CreateBook(google::gax::CallContext& context,
             ::google::example::library::v1::CreateBookRequest const& request,
             ::google::example::library::v1::Book* response) override {
    auto invoke_stub = [this](google::gax::CallContext& c,
                ::google::example::library::v1::CreateBookRequest const& req,
                ::google::example::library::v1::Book* resp) {
              return this->next_stub_->CreateBook(c, req, resp);
            };
    return google::gax::MakeRetryCall<::google::example::library::v1::CreateBookRequest,
                                      ::google::example::library::v1::Book,
                                      decltype(invoke_stub)>(
        context, request, response, std::move(invoke_stub),
        clone_retry(context), clone_backoff(context));
  }

  google::gax::Status
  GetBook(google::gax::CallContext& context,
             ::google::example::library::v1::GetBookRequest const& request,
             ::google::example::library::v1::Book* response) override {
    auto invoke_stub = [this](google::gax::CallContext& c,
                ::google::example::library::v1::GetBookRequest const& req,
                ::google::example::library::v1::Book* resp) {
              return this->next_stub_->GetBook(c, req, resp);
            };
    return google::gax::MakeRetryCall<::google::example::library::v1::GetBookRequest,
                                      ::google::example::library::v1::Book,
                                      decltype(invoke_stub)>(
        context, request, response, std::move(invoke_stub),
        clone_retry(context), clone_backoff(context));
  }

  google::gax::Status
  ListBooks(google::gax::CallContext& context,
             ::google::example::library::v1::ListBooksRequest const& request,
             ::google::example::library::v1::ListBooksResponse* response) override {
    auto invoke_stub = [this](google::gax::CallContext& c,
                ::google::example::library::v1::ListBooksRequest const& req,
                ::google::example::library::v1::ListBooksResponse* resp) {
              return this->next_stub_->ListBooks(c, req, resp);
            };
    return google::gax::MakeRetryCall<::google::example::library::v1::ListBooksRequest,
                                      ::google::example::library::v1::ListBooksResponse,
                                      decltype(invoke_stub)>(
        context, request, response, std::move(invoke_stub),
        clone_retry(context), clone_backoff(context));
  }

  google::gax::Status
  DeleteBook(google::gax::CallContext& context,
             ::google::example::library::v1::DeleteBookRequest const& request,
             ::google::example::library::v1::Empty* response) override {
    auto invoke_stub = [this](google::gax::CallContext& c,
                ::google::example::library::v1::DeleteBookRequest const& req,
                ::google::example::library::v1::Empty* resp) {
              return this->next_stub_->DeleteBook(c, req, resp);
            };
    return google::gax::MakeRetryCall<::google::example::library::v1::DeleteBookRequest,
                                      ::google::example::library::v1::Empty,
                                      decltype(invoke_stub)>(
        context, request, response, std::move(invoke_stub),
        clone_retry(context), clone_backoff(context));
  }

  google::gax::Status
  UpdateBook(google::gax::CallContext& context,
             ::google::example::library::v1::UpdateBookRequest const& request,
             ::google::example::library::v1::Book* response) override {
    auto invoke_stub = [this](google::gax::CallContext& c,
                ::google::example::library::v1::UpdateBookRequest const& req,
                ::google::example::library::v1::Book* resp) {
              return this->next_stub_->UpdateBook(c, req, resp);
            };
    return google::gax::MakeRetryCall<::google::example::library::v1::UpdateBookRequest,
                                      ::google::example::library::v1::Book,
                                      decltype(invoke_stub)>(
        context, request, response, std::move(invoke_stub),
        clone_retry(context), clone_backoff(context));
  }

  google::gax::Status
  GetBigBook(google::gax::CallContext& context,
             ::google::example::library::v1::GetBookRequest const& request,
             ::google::example::library::v1::Book* response) override {
    auto invoke_stub = [this](google::gax::CallContext& c,
                ::google::example::library::v1::GetBookRequest const& req,
                ::google::example::library::v1::Book* resp) {
              return this->next_stub_->GetBigBook(c, req, resp);
            };
    return google::gax::MakeRetryCall<::google::example::library::v1::GetBookRequest,
                                      ::google::example::library::v1::Book,
                                      decltype(invoke_stub)>(
        context, request, response, std::move(invoke_stub),
        clone_retry(context), clone_backoff(context));
  }

 private:
  std::unique_ptr<google::gax::RetryPolicy>
  clone_retry(google::gax::CallContext const &context) const {
    auto context_retry = context.RetryPolicy();
    return context_retry ? std::move(context_retry)
                         : std::move(default_retry_policy_->clone());
  }

  std::unique_ptr<google::gax::BackoffPolicy>
  clone_backoff(google::gax::CallContext const &context) const {
    auto context_backoff = context.BackoffPolicy();
    return context_backoff ? std::move(context_backoff)
                           : std::move(default_backoff_policy_->clone());
  }

  std::unique_ptr<LibraryServiceStub> next_stub_;
  const std::unique_ptr<google::gax::RetryPolicy const> default_retry_policy_;
  const std::unique_ptr<google::gax::BackoffPolicy const>  default_backoff_policy_;
};  // RetryLibraryServiceStub
}  // namespace

std::unique_ptr<LibraryServiceStub> CreateLibraryServiceStub() {
  auto credentials = grpc::GoogleDefaultCredentials();
  return CreateLibraryServiceStub(std::move(credentials));
}

std::unique_ptr<LibraryServiceStub>
CreateLibraryServiceStub(std::shared_ptr<grpc::ChannelCredentials> creds) {
  auto channel = grpc::CreateChannel("library.googleapis.com",
    std::move(creds));
  auto grpc_stub = ::google::example::library::v1::LibraryService::NewStub(std::move(channel));
  auto default_stub = std::unique_ptr<LibraryServiceStub>(new
    DefaultLibraryServiceStub(std::move(grpc_stub)));
  using ms = std::chrono::milliseconds;
  // Note: these retry and backoff times are dummy stand ins.
  // More appopriate default values will be chosen later.
  google::gax::LimitedDurationRetryPolicy<> retry_policy(ms(500), ms(500));
  google::gax::ExponentialBackoffPolicy backoff_policy(ms(20), ms(100));
  return std::unique_ptr<LibraryServiceStub>(new RetryLibraryServiceStub(
                       std::move(default_stub),
                       retry_policy,
                       backoff_policy));
}

