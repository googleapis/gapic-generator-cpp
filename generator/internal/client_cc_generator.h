// Copyright 2019 Google Inc.  All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#ifndef GOOGLE_API_CODEGEN_INTERNAL_CLIENT_CC_GENERATOR_H_
#define GOOGLE_API_CODEGEN_INTERNAL_CLIENT_CC_GENERATOR_H_

#include <memory>
#include <sstream>
#include <string>

#include "src/google/protobuf/compiler/code_generator.h"
#include "src/google/protobuf/io/zero_copy_stream.h"
#include "src/google/protobuf/descriptor.h"
#include "src/google/protobuf/descriptor.pb.h"
#include "absl/strings/string_view.h"
#include "generator_data_utils.h"
#include "printer.h"

namespace pb = google::protobuf;

namespace google {
namespace api {
namespace codegen {
namespace internal {

struct ClientCCGenerator {
  static std::string FileName(pb::ServiceDescriptor const* service) {
    std::string service_file_path = ServiceNameToFilePath(
        service->full_name());
    return absl::StrCat(service_file_path, ".gapic.cc");
  }

  static std::vector<std::string> BuildIncludes(
      pb::ServiceDescriptor const* /* service */) {
    return std::vector<std::string>();
  }

  static std::vector<std::string> BuildNamespaces(
      pb::ServiceDescriptor const* /* service */) {
    return std::vector<std::string>();
  }

  static bool Generate(
      pb::ServiceDescriptor const* service,
      std::map<std::string, std::string> const& vars,
      Printer& p,
      std::string * /* error */) {
    auto includes = BuildIncludes(service);
    auto namespaces = BuildNamespaces(service);

    p->Print(vars,
      "// Generated by the GAPIC C++ plugin.\n"
      "// If you make any local changes, they will be lost.\n"
      "// source: $proto_file_name$");

    for (auto include : includes) {
      p->Print("\n#include $include$", "include", include);
    }
    for (auto nspace : namespaces) {
      p->Print("\nnamespace $namespace$ {", "namespace", nspace);
    }

    p->Print(vars, "\n"
      "// TODO: add content");

    for (auto nspace : namespaces) {
      p->Print("\n} // namespace $namespace$", "namespace", nspace);
    }

    p->Print("\n");

    return true;
  }
};

} // namespace internal
} // namespace codegen
} // namespace api
} // namespace google

#endif // GOOGLE_API_CODEGEN_INTERNAL_CLIENT_CC_GENERATOR_H_
